// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String
  displayName String?
  avatar     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  voicePins  VoicePin[]
  comments   Comment[]
  reactions  Reaction[]
  friendshipsSent     Friendship[] @relation("friendshipsSent")
  friendshipsReceived Friendship[] @relation("friendshipsReceived")
}

model VoicePin {
  id          Int         @id @default(autoincrement())
  audioUrl    String
  description String
  latitude    Float
  longitude   Float
  visibility  Visibility
  listens     Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  images      Image[]
  reactions   Reaction[]
  comments    Comment[]
}

model Image {
  id         Int       @id @default(autoincrement())
  imageUrl   String
  createdAt  DateTime  @default(now())

  voicePinId Int
  voicePin   VoicePin  @relation(fields: [voicePinId], references: [id])
}

model Reaction {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  userId     Int
  user       User      @relation(fields: [userId], references: [id])

  voicePinId Int
  voicePin   VoicePin  @relation(fields: [voicePinId], references: [id])
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  userId     Int
  user       User      @relation(fields: [userId], references: [id])

  voicePinId Int
  voicePin   VoicePin  @relation(fields: [voicePinId], references: [id])
}

enum Visibility {
  PRIVATE
  PUBLIC
  FRIENDS
}

model Friendship {
  id         Int                   @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     FriendRequestStatus   @default(PENDING)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  sender     User                  @relation("friendshipsSent", fields: [senderId], references: [id])
  receiver   User                  @relation("friendshipsReceived", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}